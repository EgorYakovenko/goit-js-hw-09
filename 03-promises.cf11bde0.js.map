{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIAC,SAASC,cAAc,SAASC,iBAAiB,UAAUC,eAAgBC,GACzEA,EAAEC,iBAEyBL,SAASC,cAAc,yBAC9BK,UAAW,EAE3B,MAAMC,EAAQC,SAASC,KAAKC,SAASC,MAAMC,OACrCC,EAAOL,SAASC,KAAKC,SAASG,KAAKD,OACnCE,EAASN,SAASC,KAAKC,SAASI,OAAOF,OAE7C,GAAIG,MAAMR,IAAUQ,MAAMF,IAASE,MAAMD,GAEvC,YADAE,SAASC,OAAOC,QAAQ,iDAI1B,SAASC,EAAcC,EAAUT,GAC/B,OAAO,IAAIU,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUT,IAEpBY,EAAO,C,SAAEH,E,MAAUT,GAAQ,GAE5BA,EAAM,G,CAIb,MAAMiB,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,GAAKf,EAAQe,IAAK,CAChC,MAAMC,EAAevB,GAASsB,EAAI,GAAKhB,EACvCe,EAASG,KAAKZ,EAAcU,EAAGC,G,CAGjC,IAAK,MAAME,KAAWJ,EACpB,IACE,MAAMK,QAAeD,EACrBE,EAAApC,GAASmB,OAAOkB,QAAQ,qBAAqBF,EAAOb,eAAea,EAAOtB,U,CAC1E,MAAOyB,GACPF,EAAApC,GAASmB,OAAOC,QAAQ,oBAAoBkB,EAAMhB,eAAegB,EAAMzB,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\n\ndocument.querySelector('.form').addEventListener('submit', async function (e) {\n  e.preventDefault();\n  \n const createPromiseButton = document.querySelector('button[type=\"submit\"]');\n  createPromiseButton.disabled = true;\n\n      const delay = parseInt(this.elements.delay.value);\n      const step = parseInt(this.elements.step.value);\n      const amount = parseInt(this.elements.amount.value);\n\n      if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n        notiflix.Notify.failure('Please fill in all fields with valid numbers.');\n        return;\n      }\n\n      function createPromise(position, delay) {\n        return new Promise((resolve, reject) => {\n          const shouldResolve = Math.random() > 0.3;\n          setTimeout(() => {\n            if (shouldResolve) {\n              resolve({ position, delay });\n            } else {\n              reject({ position, delay });\n            }\n          }, delay);\n        });\n      }\n\n      const promises = [];\n      for (let i = 1; i <= amount; i++) {\n        const currentDelay = delay + (i - 1) * step;\n        promises.push(createPromise(i, currentDelay));\n      }\n\n      for (const promise of promises) {\n        try {\n          const result = await promise;\n          Notiflix.Notify.success(`Fulfilled promise ${result.position} in ${result.delay}ms`);\n        } catch (error) {\n          Notiflix.Notify.failure(`Rejected promise ${error.position} in ${error.delay}ms`);\n        }\n      }\n    });"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","async","e","preventDefault","disabled","delay1","parseInt","this","elements","delay","value","step","amount","isNaN","notiflix","Notify","failure","createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","promises","i","currentDelay","push","promise","result","$parcel$interopDefault","success","error"],"version":3,"file":"03-promises.cf11bde0.js.map"}